{"version":3,"sources":["Components/Menu.js","Components/Board.js","Components/PiecesTaken.js","Components/SelectReplacement.js","utilities/removeFromArray.js","App.js","index.js"],"names":["Menu","this","props","isWhiteTurn","className","onClick","onGenerateNewBoard","renderButton","whiteState","blackState","React","Component","Board","actualBoard","map","row","i","key","tile","onTileClick","id","color","piece","activeState","focus","PiecesTaken","isWhite","pieces","SelectReplacement","queen","colorSelect","rook","bishop","knight","selection","onPromoteClick","renderSelection","removeFromArray","array","elementToRemove","includes","newArray","length","push","App","generateNewBoardHandler","bind","clickTileHandler","clickPromotionHandler","board","j","String","fromCharCode","previousMoves","state","whiteTaken","blackTaken","promotionInProgress","castleData","whiteKingHasMoved","whiteRookHasMovedLeft","whiteRookHasMovedRight","blackKingHasMoved","blackRookHasMovedLeft","blackRookHasMovedRight","JSON","parse","stringify","setState","possibleEnPassant","x","y","pawnPossibleMoves","knightPossibleMoves","rookPossibleMoves","bishopPossibleMoves","queenPossibleMoves","kingPossibleMoves","generateNextBoard","promotion","focusX","charCodeAt","Number","isKingThreatened","isCheckMate","window","vex","dialog","alert","taken","returnBoard","focusData","wT","slice","bT","focusY","p","t","castleDetected","endsWith","startsWith","tileId","returnData","possibleMoves","possibleTake","removeCheckMateMoves","move","pathEnded","rookMoves","bishopMoves","kingLeft","kingRight","castleLeft","castleRight","checkForWhite","boardToCheck","kingCoords","rookAndQueenCheck","bishopAndQueenCheck","knightCheck","kingCheck","pawnCheck","scanStatus","totalMoves","concat","elementsToRemove","fakeTile","virtualBoard","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb275e62.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Menu extends React.Component{\r\n  renderButton(){\r\n    if(this.props.isWhiteTurn === null)\r\n      return <span>N/A</span>;\r\n    else\r\n      return <button className={`turnButton ${this.props.isWhiteTurn ? 'whiteButton' : 'blackButton'}`} ></button>;\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        <div className='alignHorizontal adjustGameWidth'>\r\n          <button onClick={this.props.onGenerateNewBoard}>New game</button>\r\n          <div className='alignHorizontal'>\r\n            <span>Turn : </span>\r\n            {this.renderButton()}\r\n          </div>\r\n        </div>\r\n        <div className='alignHorizontal adjustGameWidth'>\r\n          <span>White Status : {this.props.whiteState === null ? 'N/A' : this.props.whiteState}</span>\r\n          <span>Black Status : {this.props.blackState === null ? 'N/A' : this.props.blackState}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Board extends React.Component{\r\n  render(){\r\n    return(\r\n      <table>\r\n        <tbody>\r\n          {\r\n            /*Generate Board here*/\r\n            this.props.actualBoard.map((row, i) => (\r\n              <tr key={i}>\r\n                {\r\n                  row.map(tile => (\r\n                    <td\r\n                      onClick={() => this.props.onTileClick(tile)}\r\n                      key={tile.id}\r\n                      className={`tile ${tile.color}${tile.piece !== null ? ` ${tile.piece}` : ''}${tile.activeState ? ' activeState' : ''}${this.props.focus === tile.id ? ' onFocus' : ''}`}\r\n                      id={`${tile.id}`} >\r\n                    </td>\r\n                  ))\r\n                }\r\n              </tr>\r\n            ))\r\n          }\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class PiecesTaken extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className={`deathBox ${this.props.isWhite ? 'whiteTaken' : 'blackTaken'}`}>\r\n        {this.props.pieces.map((piece, i) => {\r\n          return (\r\n            <span key={i} className={`tile ${piece}`} ></span>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class SelectReplacement extends React.Component {\r\n  renderSelection(){\r\n    let queen = `${this.props.colorSelect ? 'white' : 'black'}Queen`;\r\n    let rook = `${this.props.colorSelect ? 'white' : 'black'}Rook`;\r\n    let bishop = `${this.props.colorSelect ? 'white' : 'black'}Bishop`;\r\n    let knight = `${this.props.colorSelect ? 'white' : 'black'}Knight`;\r\n    if(this.props.selection){\r\n      return (\r\n        <div>\r\n          <p>Please select a promotion for your pawn</p>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td onClick={() => this.props.onPromoteClick(queen)} className={`tile ${queen}`}></td>\r\n                <td onClick={() => this.props.onPromoteClick(rook)} className={`tile ${rook}`}></td>\r\n                <td onClick={() => this.props.onPromoteClick(bishop)} className={`tile ${bishop}`}></td>\r\n                <td onClick={() => this.props.onPromoteClick(knight)} className={`tile ${knight}`}></td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n    else{\r\n      return '';\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n      <div>\r\n        {this.renderSelection()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export default function removeFromArray(array, elementToRemove){\r\n  if(array.includes(elementToRemove)){\r\n    let newArray = [];\r\n    for(let i=0; i<array.length; i++){\r\n      if(array[i] !== elementToRemove){\r\n        newArray.push(array[i]);\r\n      }\r\n    }\r\n    return newArray;\r\n  }\r\n  else{\r\n    return array;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Menu from './Components/Menu';\r\nimport Board from './Components/Board';\r\nimport PiecesTaken from './Components/PiecesTaken';\r\nimport SelectReplacement from './Components/SelectReplacement';\r\nimport removeFromArray from './utilities/removeFromArray';\r\n\r\nexport default class App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.generateNewBoardHandler = this.generateNewBoardHandler.bind(this);\r\n    this.clickTileHandler = this.clickTileHandler.bind(this);\r\n    this.clickPromotionHandler = this.clickPromotionHandler.bind(this);\r\n    let board = [];\r\n    for(let i=0; i<8; i++){\r\n      let row = [];\r\n      for(let j=0; j<8; j++){\r\n        row[j] = {\r\n          id: `${8-i}${String.fromCharCode(65+j)}`,\r\n          color: (i % 2 === 0 && j % 2 === 0) || (i % 2 !== 0 && j % 2 !== 0) ? 'colorWhite' : 'colorBlack',\r\n          activeState: false,\r\n          piece: null\r\n        }\r\n      }\r\n      board[i] = row;\r\n    }\r\n    this.previousMoves = [];\r\n    this.state = {\r\n      actualBoard : board,\r\n      whiteTaken: [],\r\n      blackTaken: [],\r\n      isWhiteTurn : null,\r\n      focus : null,\r\n      whiteState : null,\r\n      blackState : null,\r\n      promotionInProgress : false,\r\n      castleData : {\r\n        whiteKingHasMoved : null,\r\n        whiteRookHasMovedLeft : null,\r\n        whiteRookHasMovedRight : null,\r\n        blackKingHasMoved : null,\r\n        blackRookHasMovedLeft : null,\r\n        blackRookHasMovedRight : null\r\n      }\r\n    }\r\n  }\r\n  generateNewBoardHandler(){\r\n    let board = JSON.parse(JSON.stringify(this.state.actualBoard));\r\n    for(let i=0; i<8; i++){\r\n      for(let tile of board[i]){\r\n        tile.piece = null;\r\n        tile.activeState = false;\r\n      }\r\n    }\r\n    board[0][0].piece = 'blackRook';\r\n    board[0][1].piece = 'blackKnight';\r\n    board[0][2].piece = 'blackBishop';\r\n    board[0][3].piece = 'blackQueen';\r\n    board[0][4].piece = 'blackKing';\r\n    board[0][5].piece = 'blackBishop';\r\n    board[0][6].piece = 'blackKnight';\r\n    board[0][7].piece = 'blackRook';\r\n    board[1][0].piece = 'blackPawn';\r\n    board[1][1].piece = 'blackPawn';\r\n    board[1][2].piece = 'blackPawn';\r\n    board[1][3].piece = 'blackPawn';\r\n    board[1][4].piece = 'blackPawn';\r\n    board[1][5].piece = 'blackPawn';\r\n    board[1][6].piece = 'blackPawn';\r\n    board[1][7].piece = 'blackPawn';\r\n    board[7][0].piece = 'whiteRook';\r\n    board[7][1].piece = 'whiteKnight';\r\n    board[7][2].piece = 'whiteBishop';\r\n    board[7][3].piece = 'whiteQueen';\r\n    board[7][4].piece = 'whiteKing';\r\n    board[7][5].piece = 'whiteBishop';\r\n    board[7][6].piece = 'whiteKnight';\r\n    board[7][7].piece = 'whiteRook';\r\n    board[6][0].piece = 'whitePawn';\r\n    board[6][1].piece = 'whitePawn';\r\n    board[6][2].piece = 'whitePawn';\r\n    board[6][3].piece = 'whitePawn';\r\n    board[6][4].piece = 'whitePawn';\r\n    board[6][5].piece = 'whitePawn';\r\n    board[6][6].piece = 'whitePawn';\r\n    board[6][7].piece = 'whitePawn';\r\n    this.setState({\r\n      isWhiteTurn : true,\r\n      whiteState : 'Safe',\r\n      blackState : 'Safe',\r\n      actualBoard : board,\r\n      focus: null,\r\n      whiteTaken : [],\r\n      blackTaken : [],\r\n      possibleEnPassant : {x:null, y:null},\r\n      castleData : {\r\n        whiteKingHasMoved : false,\r\n        whiteRookHasMovedLeft : false,\r\n        whiteRookHasMovedRight : false,\r\n        blackKingHasMoved : false,\r\n        blackRookHasMovedLeft : false,\r\n        blackRookHasMovedRight : false\r\n      }\r\n    });\r\n  }\r\n  clickTileHandler(tile){\r\n    if(this.state.promotionInProgress) return;\r\n    if(this.state.focus === null){\r\n      if(tile.piece === null) return;\r\n      switch(tile.piece){\r\n        case 'whitePawn':\r\n          if(this.state.isWhiteTurn) this.pawnPossibleMoves(tile.id, true);\r\n          break;\r\n        case 'blackPawn':\r\n          if(!this.state.isWhiteTurn) this.pawnPossibleMoves(tile.id, false);\r\n          break;\r\n        case 'whiteKnight':\r\n          if(this.state.isWhiteTurn) this.knightPossibleMoves(tile.id, true);\r\n          break;\r\n        case 'blackKnight':\r\n          if(!this.state.isWhiteTurn) this.knightPossibleMoves(tile.id, false);\r\n          break;\r\n        case 'whiteRook':\r\n          if(this.state.isWhiteTurn) this.rookPossibleMoves(tile.id, true);\r\n          break;\r\n        case 'blackRook':\r\n          if(!this.state.isWhiteTurn) this.rookPossibleMoves(tile.id, false);\r\n          break;\r\n        case 'whiteBishop':\r\n          if(this.state.isWhiteTurn) this.bishopPossibleMoves(tile.id, true);\r\n          break;\r\n        case 'blackBishop':\r\n          if(!this.state.isWhiteTurn) this.bishopPossibleMoves(tile.id, false);\r\n          break;\r\n        case 'whiteQueen':\r\n          if(this.state.isWhiteTurn) this.queenPossibleMoves(tile.id, true);\r\n          break;\r\n        case 'blackQueen':\r\n          if(!this.state.isWhiteTurn) this.queenPossibleMoves(tile.id, false);\r\n          break;\r\n        case 'whiteKing':\r\n          if(this.state.isWhiteTurn) this.kingPossibleMoves(tile.id, true);\r\n          break;\r\n        case 'blackKing':\r\n          if(!this.state.isWhiteTurn) this.kingPossibleMoves(tile.id, false);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    else{\r\n      let board = JSON.parse(JSON.stringify(this.state.actualBoard));\r\n      if(tile.id === this.state.focus){\r\n        for(let row of board){\r\n          for(let tile of row){\r\n            tile.activeState = false;\r\n          }\r\n        }\r\n        this.setState({\r\n          actualBoard: board,\r\n          focus : null\r\n        })\r\n      }\r\n      else if(tile.activeState){\r\n        this.generateNextBoard(tile, board);\r\n      }\r\n    }\r\n  }\r\n  clickPromotionHandler(promotion){\r\n    let board = JSON.parse(JSON.stringify(this.state.actualBoard));\r\n    let focusX = this.state.focus.charCodeAt(1)-65;\r\n    let focusY = 8-Number(this.state.focus[0]);\r\n    board[focusY][focusX].piece = promotion;\r\n    let whiteState = this.isKingThreatened(board, true);\r\n    let blackState = this.isKingThreatened(board, false);\r\n    this.setState({\r\n      actualBoard: board,\r\n      focus : null,\r\n      isWhiteTurn : !this.state.isWhiteTurn,\r\n      whiteState : whiteState ? 'Check' : 'Safe',\r\n      blackState : blackState ? 'Check' : 'Safe',\r\n      promotionInProgress : false\r\n    }, () => {\r\n      if(this.isCheckMate(this.state.isWhiteTurn)){\r\n        window.vex.dialog.alert(`${this.state.isWhiteTurn ? 'Black' : 'White'} wins !`);\r\n      }\r\n    });\r\n  }\r\n  generateNextBoard(\r\n    tile,\r\n    board = JSON.parse(JSON.stringify(this.state.actualBoard)),\r\n    returnBoard = false,\r\n    focusData = {x: this.state.focus.charCodeAt(1)-65, y: 8-Number(this.state.focus[0])}\r\n  ){\r\n    let wT = this.state.whiteTaken.slice();\r\n    let bT = this.state.blackTaken.slice();\r\n    let x = tile.id.charCodeAt(1)-65;\r\n    let y = 8-Number(tile.id[0]);\r\n    let focusX = focusData.x;\r\n    let focusY = focusData.y;\r\n    let p = board[focusY][focusX].piece;\r\n    let t = board[y][x].piece;\r\n    let castleDetected = 0;\r\n    if(p.endsWith(\"Pawn\") && (\r\n      (focusX-1 === x && focusY-1 === y) ||\r\n      (focusX-1 === x && focusY+1 === y) ||\r\n      (focusX+1 === x && focusY-1 === y) ||\r\n      (focusX+1 === x && focusY+1 === y)\r\n    ) && t === null){\r\n      let taken;\r\n      if(focusX-1 === x){\r\n        taken = board[focusY][focusX-1].piece;\r\n        board[focusY][focusX-1].piece = null;\r\n      }\r\n      else if(focusX+1 === x){\r\n        taken = board[focusY][focusX+1].piece;\r\n        board[focusY][focusX+1].piece = null;\r\n      }\r\n      //Should always be true; better safe than sorry\r\n      if(taken !== null){\r\n        if(taken.startsWith('white')) wT.push(taken);\r\n        else bT.push(taken);\r\n      }\r\n    }\r\n    if(p.endsWith(\"Pawn\") && focusX === x && (focusY+2 === y || focusY-2 === y)){\r\n      this.setState({\r\n        possibleEnPassant : {x : x, y : y}\r\n      });\r\n    }\r\n    else{\r\n      this.setState({\r\n        possibleEnPassant : {x : null, y : null}\r\n      });\r\n    }\r\n    if(t !== null){\r\n      if(t.startsWith('white')) wT.push(t);\r\n      else bT.push(t);\r\n    }\r\n    if(p.endsWith('King') && focusX + 2 === x){\r\n      castleDetected = 2;\r\n      board[focusY][focusX+3].piece = null;\r\n      board[y][x-1].piece = `${p.startsWith('white') ? 'white' : 'black'}Rook`;\r\n    }\r\n    else if(p.endsWith('King') && focusX - 2 === x){\r\n      castleDetected = 1;\r\n      board[focusY][focusX-4].piece = null;\r\n      board[y][x+1].piece = `${p.startsWith('white') ? 'white' : 'black'}Rook`;\r\n    }\r\n    board[focusY][focusX].piece = null;\r\n    board[y][x].piece = p;\r\n    for(let row of board){\r\n      for(let tile of row){\r\n        tile.activeState = false;\r\n      }\r\n    }\r\n    let whiteState = this.isKingThreatened(board, true);\r\n    let blackState = this.isKingThreatened(board, false);\r\n    if(!returnBoard){\r\n      if(p.endsWith(\"Pawn\") && (p.startsWith('white') ? y === 0 : y === 7)){\r\n        this.setState({\r\n          actualBoard: board,\r\n          focus : tile.id,\r\n          whiteTaken : wT,\r\n          blackTaken : bT,\r\n          whiteState : whiteState ? 'Check' : 'Safe',\r\n          blackState : blackState ? 'Check' : 'Safe',\r\n          promotionInProgress : true\r\n        });\r\n      }\r\n      else{\r\n        let isWhite = p.startsWith('white') ? 'white' : 'black';\r\n        let castleData = JSON.parse(JSON.stringify(this.state.castleData));\r\n        if(castleDetected === 0){\r\n          if(p.endsWith(\"King\") && !castleData[`${isWhite}KingHasMoved`]){\r\n            castleData[`${isWhite}KingHasMoved`] = true;\r\n          }\r\n          else if(\r\n            p.endsWith(\"Rook\") && !castleData[`${isWhite}RookHasMovedLeft`]\r\n            && focusX === 0 && (p.startsWith('white') ? focusY === 7 : focusY === 0)\r\n          ){\r\n            castleData[`${isWhite}RookHasMovedLeft`] = true;\r\n          }\r\n          else if(\r\n            p.endsWith(\"Rook\") && !castleData[`${isWhite}RookHasMovedRight`]\r\n            && focusX === 7 && (p.startsWith('white') ? focusY === 7 : focusY === 0)\r\n          ){\r\n            castleData[`${isWhite}RookHasMovedRight`] = true;\r\n          }\r\n        }\r\n        else if(castleDetected === 1){\r\n          castleData[`${isWhite}KingHasMoved`] = true;\r\n          castleData[`${isWhite}RookHasMovedLeft`] = true;\r\n        }\r\n        else if(castleDetected === 2){\r\n          castleData[`${isWhite}KingHasMoved`] = true;\r\n          castleData[`${isWhite}RookHasMovedRight`] = true;\r\n        }\r\n        this.setState({\r\n          actualBoard: board,\r\n          focus : null,\r\n          whiteTaken : wT,\r\n          blackTaken : bT,\r\n          isWhiteTurn : !this.state.isWhiteTurn,\r\n          whiteState : whiteState ? 'Check' : 'Safe',\r\n          blackState : blackState ? 'Check' : 'Safe',\r\n          castleData : castleData\r\n        }, () => {\r\n          if(this.isCheckMate(this.state.isWhiteTurn)){\r\n            window.vex.dialog.alert(`${this.state.isWhiteTurn ? 'Black' : 'White'} wins !`);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    else{\r\n      return board;\r\n    }\r\n  }\r\n  //returnData is not false or true in this case:\r\n  // 0 is false\r\n  // 1 is true\r\n  // 2 will return the two tiles that the pawn threatens if they exist\r\n  pawnPossibleMoves(tileId, isWhite, returnData = 0, board = JSON.parse(JSON.stringify(this.state.actualBoard))){\r\n    let possibleMoves = [];\r\n    let x = tileId.charCodeAt(1)-65;\r\n    let y = 8-Number(tileId[0]);\r\n    if(returnData === 2){\r\n      let possibleTake = [];\r\n      if(isWhite){\r\n        if(y-1 >= 0){\r\n          if(x-1 >= 0){\r\n            possibleTake.push({x : x-1, y: y-1});\r\n          }\r\n          if(x+1 <= 7){\r\n            possibleTake.push({x : x+1, y: y-1});\r\n          }\r\n        }\r\n      }\r\n      else{\r\n        if(y+1 <= 7){\r\n          if(x-1 >= 0){\r\n            possibleTake.push({x : x-1, y: y+1});\r\n          }\r\n          if(x+1 <= 7){\r\n            possibleTake.push({x : x+1, y: y+1});\r\n          }\r\n        }\r\n      }\r\n      return possibleTake;\r\n    }\r\n    if(isWhite){\r\n      if(y === 6){\r\n        if(board[y-1][x].piece === null){\r\n          possibleMoves.push({x : x, y: y-1});\r\n          if(board[y-2][x].piece === null)\r\n            possibleMoves.push({x : x, y: y-2});\r\n        }\r\n        if(x+1 <= 7 && (board[y-1][x+1].piece !== null && board[y-1][x+1].piece.startsWith('black')))\r\n          possibleMoves.push({x : x+1, y: y-1});\r\n        if(x-1 >= 0 && (board[y-1][x-1].piece !== null && board[y-1][x-1].piece.startsWith('black')))\r\n          possibleMoves.push({x : x-1, y: y-1});\r\n      }\r\n      else{\r\n        if(y-1 >= 0){\r\n          if(board[y-1][x].piece === null)\r\n            possibleMoves.push({x : x, y: y-1});\r\n          if(\r\n            x+1 <= 7 && ((board[y-1][x+1].piece !== null && board[y-1][x+1].piece.startsWith('black'))\r\n            || (board[y][x+1].piece !== null && board[y][x+1].piece.startsWith('black')\r\n            && y === this.state.possibleEnPassant.y && x+1 === this.state.possibleEnPassant.x))\r\n          ) possibleMoves.push({x : x+1, y: y-1});\r\n          if(\r\n            x-1 >= 0 && ((board[y-1][x-1].piece !== null && board[y-1][x-1].piece.startsWith('black'))\r\n            || (board[y][x-1].piece !== null && board[y][x-1].piece.startsWith('black')\r\n            && y === this.state.possibleEnPassant.y && x-1 === this.state.possibleEnPassant.x))\r\n          ) possibleMoves.push({x : x-1, y: y-1});\r\n        }\r\n      }\r\n    }\r\n    else{\r\n      if(y === 1){\r\n        if(board[y+1][x].piece === null){\r\n          possibleMoves.push({x : x, y: y+1});\r\n          if(board[y+2][x].piece === null)\r\n            possibleMoves.push({x : x, y: y+2});\r\n        }\r\n        if(x+1 <= 7 && (board[y+1][x+1].piece !== null && board[y+1][x+1].piece.startsWith('white')))\r\n          possibleMoves.push({x : x+1, y: y+1});\r\n        if(x-1 >= 0 && (board[y+1][x-1].piece !== null && board[y+1][x-1].piece.startsWith('white')))\r\n          possibleMoves.push({x : x-1, y: y+1});\r\n      }\r\n      else{\r\n        //Should normally always happen since\r\n        //Pawns transform themselves in other pieces at the end of the board\r\n        if(y+1 <= 7){\r\n          if(board[y+1][x].piece === null)\r\n            possibleMoves.push({x : x, y: y+1});\r\n          if(\r\n            x+1 <= 7 && ((board[y+1][x+1].piece !== null && board[y+1][x+1].piece.startsWith('white'))\r\n            || (board[y][x+1].piece !== null && board[y][x+1].piece.startsWith('white')\r\n            && y === this.state.possibleEnPassant.y && x+1 === this.state.possibleEnPassant.x))\r\n          ) possibleMoves.push({x : x+1, y: y+1});\r\n          if(\r\n            x-1 >= 0 && ((board[y+1][x-1].piece !== null && board[y+1][x-1].piece.startsWith('white'))\r\n            || (board[y][x-1].piece !== null && board[y][x-1].piece.startsWith('white')\r\n            && y === this.state.possibleEnPassant.y && x-1 === this.state.possibleEnPassant.x))\r\n          ) possibleMoves.push({x : x-1, y: y+1});\r\n        }\r\n      }\r\n    }\r\n    if(returnData === 0){\r\n      possibleMoves = this.removeCheckMateMoves(possibleMoves, {x: x, y: y}, isWhite, board);\r\n      for(let move of possibleMoves){\r\n        board[move.y][move.x].activeState = true;\r\n      }\r\n      this.setState({\r\n        actualBoard: board,\r\n        focus: tileId\r\n      });\r\n    }\r\n    else if(returnData === 1)\r\n      return possibleMoves;\r\n  }\r\n  knightPossibleMoves(tileId, isWhite, returnData = false, board = JSON.parse(JSON.stringify(this.state.actualBoard))){\r\n    let possibleMoves = [];\r\n    let x = tileId.charCodeAt(1)-65;\r\n    let y = 8-Number(tileId[0]);\r\n    if(y+2 < 8){\r\n      if(x+2 < 8){\r\n        if(\r\n          board[y+2][x+1].piece === null\r\n          || (isWhite ? board[y+2][x+1].piece.startsWith('black') : board[y+2][x+1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+1, y : y+2});\r\n        if(\r\n          board[y+1][x+2].piece === null\r\n          || (isWhite ? board[y+1][x+2].piece.startsWith('black') : board[y+1][x+2].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+2, y : y+1});\r\n      }\r\n      else if(x+1 < 8){\r\n        if(\r\n          board[y+2][x+1].piece === null\r\n          || (isWhite ? board[y+2][x+1].piece.startsWith('black') : board[y+2][x+1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+1, y : y+2});\r\n      }\r\n      if(x-2 >= 0){\r\n        if(\r\n          board[y+2][x-1].piece === null\r\n          || (isWhite ? board[y+2][x-1].piece.startsWith('black') : board[y+2][x-1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-1, y : y+2});\r\n        if(\r\n          board[y+1][x-2].piece === null\r\n          || (isWhite ? board[y+1][x-2].piece.startsWith('black') : board[y+1][x-2].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-2, y : y+1});\r\n      }\r\n      else if(x-1 >= 0){\r\n        if(\r\n          board[y+2][x-1].piece === null\r\n          || (isWhite ? board[y+2][x-1].piece.startsWith('black') : board[y+2][x-1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-1, y : y+2});\r\n      }\r\n    }\r\n    else if(y+1 < 8){\r\n      if(x+2 < 8){\r\n        if(\r\n          board[y+1][x+2].piece === null\r\n          || (isWhite ? board[y+1][x+2].piece.startsWith('black') : board[y+1][x+2].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+2, y : y+1});\r\n      }\r\n      if(x-2 >= 0){\r\n        if(\r\n          board[y+1][x-2].piece === null\r\n          || (isWhite ? board[y+1][x-2].piece.startsWith('black') : board[y+1][x-2].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-2, y : y+1});\r\n      }\r\n    }\r\n    if(y-2 >= 0){\r\n      if(x+2 < 8){\r\n        if(\r\n          board[y-2][x+1].piece === null\r\n          || (isWhite ? board[y-2][x+1].piece.startsWith('black') : board[y-2][x+1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+1, y : y-2});\r\n        if(\r\n          board[y-1][x+2].piece === null\r\n          || (isWhite ? board[y-1][x+2].piece.startsWith('black') : board[y-1][x+2].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+2, y : y-1});\r\n      }\r\n      else if(x+1 < 8){\r\n        if(\r\n          board[y-2][x+1].piece === null\r\n          || (isWhite ? board[y-2][x+1].piece.startsWith('black') : board[y-2][x+1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+1, y : y-2});\r\n      }\r\n      if(x-2 >= 0){\r\n        if(\r\n          board[y-2][x-1].piece === null\r\n          || (isWhite ? board[y-2][x-1].piece.startsWith('black') : board[y-2][x-1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-1, y : y-2});\r\n        if(\r\n          board[y-1][x-2].piece === null\r\n          || (isWhite ? board[y-1][x-2].piece.startsWith('black') : board[y-1][x-2].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-2, y : y-1});\r\n      }\r\n      else if(x-1 >= 0){\r\n        if(\r\n          board[y-2][x-1].piece === null\r\n          || (isWhite ? board[y-2][x-1].piece.startsWith('black') : board[y-2][x-1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-1, y : y-2});\r\n      }\r\n    }\r\n    else if(y-1 >= 0){\r\n      if(x-2 >= 0){\r\n        if(\r\n          board[y-1][x-2].piece === null\r\n          || (isWhite ? board[y-1][x-2].piece.startsWith('black') : board[y-1][x-2].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-2, y : y-1});\r\n      }\r\n      if(x+2 < 8){\r\n        if(\r\n          board[y-1][x+2].piece === null\r\n          || (isWhite ? board[y-1][x+2].piece.startsWith('black') : board[y-1][x+2].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+2, y : y-1});\r\n      }\r\n    }\r\n    if(returnData)\r\n      return possibleMoves;\r\n    else{\r\n      possibleMoves = this.removeCheckMateMoves(possibleMoves, {x: x, y: y}, isWhite, board);\r\n      for(let move of possibleMoves){\r\n        board[move.y][move.x].activeState = true;\r\n      }\r\n      this.setState({\r\n        actualBoard: board,\r\n        focus: tileId\r\n      });\r\n    }\r\n  }\r\n  rookPossibleMoves(tileId, isWhite, returnData = false, board = JSON.parse(JSON.stringify(this.state.actualBoard))){\r\n    let possibleMoves = [];\r\n    let x = tileId.charCodeAt(1)-65;\r\n    let y = 8-Number(tileId[0]);\r\n    //up\r\n    let pathEnded = false;\r\n    for(let i=1; !pathEnded; i++){\r\n      if(y-i < 0){\r\n        pathEnded = true;\r\n      }\r\n      else if(board[y-i][x].piece !== null){\r\n        if(isWhite ? board[y-i][x].piece.startsWith('black') : board[y-i][x].piece.startsWith('white')){\r\n          possibleMoves.push({x : x, y : y-i});\r\n          pathEnded = true;\r\n        }\r\n        else pathEnded = true;\r\n      }\r\n      else{\r\n        possibleMoves.push({x : x, y : y-i});\r\n      }\r\n    }\r\n    //down\r\n    pathEnded = false;\r\n    for(let i=1; !pathEnded; i++){\r\n      if(y+i > 7){\r\n        pathEnded = true;\r\n      }\r\n      else if(board[y+i][x].piece !== null){\r\n        if(isWhite ? board[y+i][x].piece.startsWith('black') : board[y+i][x].piece.startsWith('white')){\r\n          possibleMoves.push({x : x, y : y+i});\r\n          pathEnded = true;\r\n        }\r\n        else pathEnded = true;\r\n      }\r\n      else{\r\n        possibleMoves.push({x : x, y : y+i});\r\n      }\r\n    }\r\n    //left\r\n    pathEnded = false;\r\n    for(let i=1; !pathEnded; i++){\r\n      if(x-i < 0){\r\n        pathEnded = true;\r\n      }\r\n      else if(board[y][x-i].piece !== null){\r\n        if(isWhite ? board[y][x-i].piece.startsWith('black') : board[y][x-i].piece.startsWith('white')){\r\n          possibleMoves.push({x : x-i, y : y});\r\n          pathEnded = true;\r\n        }\r\n        else pathEnded = true;\r\n      }\r\n      else{\r\n        possibleMoves.push({x : x-i, y : y});\r\n      }\r\n    }\r\n    //right\r\n    pathEnded = false;\r\n    for(let i=1; !pathEnded; i++){\r\n      if(x+i > 7){\r\n        pathEnded = true;\r\n      }\r\n      else if(board[y][x+i].piece !== null){\r\n        if(isWhite ? board[y][x+i].piece.startsWith('black') : board[y][x+i].piece.startsWith('white')){\r\n          possibleMoves.push({x : x+i, y : y});\r\n          pathEnded = true;\r\n        }\r\n        else pathEnded = true;\r\n      }\r\n      else{\r\n        possibleMoves.push({x : x+i, y : y});\r\n      }\r\n    }\r\n    if(returnData){\r\n      return possibleMoves;\r\n    }\r\n    else{\r\n      possibleMoves = this.removeCheckMateMoves(possibleMoves, {x: x, y: y}, isWhite, board);\r\n      for(let move of possibleMoves){\r\n        board[move.y][move.x].activeState = true;\r\n      }\r\n      this.setState({\r\n        actualBoard: board,\r\n        focus: tileId\r\n      });\r\n    }\r\n  }\r\n  bishopPossibleMoves(tileId, isWhite, returnData = false, board = JSON.parse(JSON.stringify(this.state.actualBoard))){\r\n    let possibleMoves = [];\r\n    let x = tileId.charCodeAt(1)-65;\r\n    let y = 8-Number(tileId[0]);\r\n    //right-up\r\n    let pathEnded = false;\r\n    for(let i=1; !pathEnded; i++){\r\n      if(y-i < 0 || x+i > 7){\r\n        pathEnded = true;\r\n      }\r\n      else if(board[y-i][x+i].piece !== null){\r\n        if(isWhite ? board[y-i][x+i].piece.startsWith('black') : board[y-i][x+i].piece.startsWith('white')){\r\n          possibleMoves.push({x : x+i, y : y-i});\r\n          pathEnded = true;\r\n        }\r\n        else pathEnded = true;\r\n      }\r\n      else{\r\n        possibleMoves.push({x : x+i, y : y-i});\r\n      }\r\n    }\r\n    //right-down\r\n    pathEnded = false;\r\n    for(let i=1; !pathEnded; i++){\r\n      if(y+i > 7 || x+i > 7){\r\n        pathEnded = true;\r\n      }\r\n      else if(board[y+i][x+i].piece !== null){\r\n        if(isWhite ? board[y+i][x+i].piece.startsWith('black') : board[y+i][x+i].piece.startsWith('white')){\r\n          possibleMoves.push({x : x+i, y : y+i});\r\n          pathEnded = true;\r\n        }\r\n        else pathEnded = true;\r\n      }\r\n      else{\r\n        possibleMoves.push({x : x+i, y : y+i});\r\n      }\r\n    }\r\n    //left-down\r\n    pathEnded = false;\r\n    for(let i=1; !pathEnded; i++){\r\n      if(y+i > 7 || x-i < 0){\r\n        pathEnded = true;\r\n      }\r\n      else if(board[y+i][x-i].piece !== null){\r\n        if(isWhite ? board[y+i][x-i].piece.startsWith('black') : board[y+i][x-i].piece.startsWith('white')){\r\n          possibleMoves.push({x : x-i, y : y+i});\r\n          pathEnded = true;\r\n        }\r\n        else pathEnded = true;\r\n      }\r\n      else{\r\n        possibleMoves.push({x : x-i, y : y+i});\r\n      }\r\n    }\r\n    //left-up\r\n    pathEnded = false;\r\n    for(let i=1; !pathEnded; i++){\r\n      if(y-i < 0 || x-i < 0){\r\n        pathEnded = true;\r\n      }\r\n      else if(board[y-i][x-i].piece !== null){\r\n        if(isWhite ? board[y-i][x-i].piece.startsWith('black') : board[y-i][x-i].piece.startsWith('white')){\r\n          possibleMoves.push({x : x-i, y : y-i});\r\n          pathEnded = true;\r\n        }\r\n        else pathEnded = true;\r\n      }\r\n      else{\r\n        possibleMoves.push({x : x-i, y : y-i});\r\n      }\r\n    }\r\n    if(returnData){\r\n      return possibleMoves;\r\n    }\r\n    else{\r\n      possibleMoves = this.removeCheckMateMoves(possibleMoves, {x: x, y: y}, isWhite, board);\r\n      for(let move of possibleMoves){\r\n        board[move.y][move.x].activeState = true;\r\n      }\r\n      this.setState({\r\n        actualBoard: board,\r\n        focus: tileId\r\n      });\r\n    }\r\n  }\r\n  queenPossibleMoves(tileId, isWhite, returnData = false, board = JSON.parse(JSON.stringify(this.state.actualBoard))){\r\n    let x = tileId.charCodeAt(1)-65;\r\n    let y = 8-Number(tileId[0]);\r\n    let rookMoves = this.rookPossibleMoves(tileId, isWhite, true);\r\n    let bishopMoves = this.bishopPossibleMoves(tileId, isWhite, true);\r\n    let possibleMoves = [...rookMoves, ...bishopMoves];\r\n    if(returnData){\r\n      return possibleMoves;\r\n    }\r\n    else{\r\n      possibleMoves = this.removeCheckMateMoves(possibleMoves, {x: x, y: y}, isWhite, board);\r\n      for(let move of possibleMoves){\r\n        board[move.y][move.x].activeState = true;\r\n      }\r\n      this.setState({\r\n        actualBoard: board,\r\n        focus: tileId\r\n      });\r\n    }\r\n  }\r\n  //The method below is meant to be reworked\r\n  kingPossibleMoves(tileId, isWhite, returnData = false, board = JSON.parse(JSON.stringify(this.state.actualBoard))){\r\n    let possibleMoves = [];\r\n    let x = tileId.charCodeAt(1)-65;\r\n    let y = 8-Number(tileId[0]);\r\n    if(y-1 >= 0){\r\n      if(\r\n        board[y-1][x].piece === null\r\n        || (isWhite ? board[y-1][x].piece.startsWith('black') : board[y-1][x].piece.startsWith('white'))\r\n      ) possibleMoves.push({x : x, y : y-1});\r\n      if(x+1 < 8){\r\n        if(\r\n          board[y-1][x+1].piece === null\r\n          || (isWhite ? board[y-1][x+1].piece.startsWith('black') : board[y-1][x+1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+1, y : y-1});\r\n      }\r\n      if(x-1 >= 0){\r\n        if(\r\n          board[y-1][x-1].piece === null\r\n          || (isWhite ? board[y-1][x-1].piece.startsWith('black') : board[y-1][x-1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-1, y : y-1});\r\n      }\r\n    }\r\n    if(y+1 < 8){\r\n      if(\r\n        board[y+1][x].piece === null\r\n        || (isWhite ? board[y+1][x].piece.startsWith('black') : board[y+1][x].piece.startsWith('white'))\r\n      ) possibleMoves.push({x : x, y : y+1});\r\n      if(x+1 < 8){\r\n        if(\r\n          board[y+1][x+1].piece === null\r\n          || (isWhite ? board[y+1][x+1].piece.startsWith('black') : board[y+1][x+1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x+1, y : y+1});\r\n      }\r\n      if(x-1 >= 0){\r\n        if(\r\n          board[y+1][x-1].piece === null\r\n          || (isWhite ? board[y+1][x-1].piece.startsWith('black') : board[y+1][x-1].piece.startsWith('white'))\r\n        ) possibleMoves.push({x : x-1, y : y+1});\r\n      }\r\n    }\r\n    //By checking the 2 conditions below on their own\r\n    //I am sure their content is not added twice in possibleMoves\r\n    //I also store the values after placing them into the array\r\n    //Alloying me to use them to check if the castle move is possible later on\r\n    let kingLeft = null;\r\n    let kingRight = null;\r\n    if(x+1 < 8){\r\n      if(\r\n        board[y][x+1].piece === null\r\n        || (isWhite ? board[y][x+1].piece.startsWith('black') : board[y][x+1].piece.startsWith('white'))\r\n      ){\r\n        possibleMoves.push({x : x+1, y : y});\r\n        kingRight = possibleMoves[possibleMoves.length-1];\r\n      }\r\n    }\r\n    if(x-1 >= 0){\r\n      if(\r\n        board[y][x-1].piece === null\r\n        || (isWhite ? board[y][x-1].piece.startsWith('black') : board[y][x-1].piece.startsWith('white'))\r\n      ){\r\n        possibleMoves.push({x : x-1, y : y});\r\n        kingLeft = possibleMoves[possibleMoves.length-1];\r\n      }\r\n    }\r\n    if(returnData){\r\n      return possibleMoves;\r\n    }\r\n    else{\r\n      let castleLeft = null;\r\n      let castleRight = null;\r\n      if(isWhite\r\n      ? this.state.whiteState !== 'Check' && !this.state.castleData['whiteKingHasMoved'] && !this.state.castleData['whiteRookHasMovedLeft']\r\n      : this.state.blackState !== 'Check' && !this.state.castleData['blackKingHasMoved'] && !this.state.castleData['blackRookHasMovedLeft']){\r\n        if(board[y][x-1].piece === null && board[y][x-2].piece === null && board[y][x-3].piece === null){\r\n          possibleMoves.push({x : x-2, y : y});\r\n          castleLeft = possibleMoves[possibleMoves.length-1];\r\n        }\r\n      }\r\n      if(isWhite\r\n      ? this.state.whiteState !== 'Check' && !this.state.castleData['whiteKingHasMoved'] && !this.state.castleData['whiteRookHasMovedRight']\r\n      : this.state.whiteState !== 'Check' && !this.state.castleData['blackKingHasMoved'] && !this.state.castleData['blackRookHasMovedRight']){\r\n        if(board[y][x+1].piece === null && board[y][x+2].piece === null){\r\n          possibleMoves.push({x : x+2, y : y});\r\n          castleRight = possibleMoves[possibleMoves.length-1];\r\n        }\r\n      }\r\n      possibleMoves = this.removeCheckMateMoves(possibleMoves, {x: x, y: y}, isWhite, board);\r\n      if(possibleMoves.includes(castleRight) && !possibleMoves.includes(kingRight)){\r\n        possibleMoves = removeFromArray(possibleMoves, castleRight);\r\n      }\r\n      if(possibleMoves.includes(castleLeft) && !possibleMoves.includes(kingLeft)){\r\n        possibleMoves = removeFromArray(possibleMoves, castleRight);\r\n      }\r\n      for(let move of possibleMoves){\r\n        board[move.y][move.x].activeState = true;\r\n      }\r\n      this.setState({\r\n        actualBoard: board,\r\n        focus: tileId\r\n      });\r\n    }\r\n  }\r\n  isKingThreatened(board, checkForWhite){\r\n    let boardToCheck = JSON.parse(JSON.stringify(board));\r\n    let kingCoords = null;\r\n    for(let i=0; i<boardToCheck.length; i++){\r\n      for(let j=0; j<boardToCheck[i].length; j++){\r\n        if(checkForWhite ? boardToCheck[i][j].piece === 'whiteKing' : boardToCheck[i][j].piece === 'blackKing'){\r\n          kingCoords = {x : j, y : i};\r\n          break;\r\n        }\r\n      }\r\n      if(kingCoords !== null) break;\r\n    }\r\n    if(kingCoords !== null){\r\n      let tileId = `${8-kingCoords.y}${String.fromCharCode(65+kingCoords.x)}`;\r\n      //rookAndQueenCheck\r\n      let rookAndQueenCheck = this.rookPossibleMoves(\r\n        tileId,\r\n        checkForWhite ? true : false,\r\n        true,\r\n        JSON.parse(JSON.stringify(boardToCheck))\r\n      );\r\n      for(let move of rookAndQueenCheck){\r\n        if(boardToCheck[move.y][move.x].piece === (checkForWhite ? 'blackRook' : 'whiteRook')\r\n        || boardToCheck[move.y][move.x].piece === (checkForWhite ? 'blackQueen' : 'whiteQueen')){\r\n          return true;\r\n        }\r\n      }\r\n      //bishopAndQueenCheck\r\n      let bishopAndQueenCheck = this.bishopPossibleMoves(\r\n        tileId,\r\n        checkForWhite ? true : false,\r\n        true,\r\n        JSON.parse(JSON.stringify(boardToCheck))\r\n      );\r\n      for(let move of bishopAndQueenCheck){\r\n        if(boardToCheck[move.y][move.x].piece === (checkForWhite ? 'blackBishop' : 'whiteBishop')\r\n        || boardToCheck[move.y][move.x].piece === (checkForWhite ? 'blackQueen' : 'whiteQueen')){\r\n          return true;\r\n        }\r\n      }\r\n      //knightCheck\r\n      let knightCheck = this.knightPossibleMoves(\r\n        tileId,\r\n        checkForWhite ? true : false,\r\n        true,\r\n        JSON.parse(JSON.stringify(boardToCheck))\r\n      );\r\n      for(let move of knightCheck){\r\n        if(boardToCheck[move.y][move.x].piece === (checkForWhite ? 'blackKnight' : 'whiteKnight')){\r\n          return true;\r\n        }\r\n      }\r\n      //kingCheck\r\n      let kingCheck = this.kingPossibleMoves(\r\n        tileId,\r\n        checkForWhite ? true : false,\r\n        true,\r\n        JSON.parse(JSON.stringify(boardToCheck))\r\n      );\r\n      for(let move of kingCheck){\r\n        if(boardToCheck[move.y][move.x].piece === (checkForWhite ? 'blackKing' : 'whiteKing')){\r\n          return true;\r\n        }\r\n      }\r\n      //pawnCheck\r\n      let pawnCheck = this.pawnPossibleMoves(\r\n        tileId,\r\n        checkForWhite ? true : false,\r\n        2,\r\n        JSON.parse(JSON.stringify(boardToCheck))\r\n      );\r\n      for(let move of pawnCheck){\r\n        if(boardToCheck[move.y][move.x].piece === (checkForWhite ? 'blackPawn' : 'whitePawn')){\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n    else{\r\n      return -1;\r\n    }\r\n  }\r\n  isCheckMate(checkForWhite){\r\n    if((checkForWhite ? this.state.whiteState : this.state.blackState) === 'Check'){\r\n      let board = JSON.parse(JSON.stringify(this.state.actualBoard));\r\n      let scanStatus = true;\r\n      let totalMoves = [];\r\n      for(let row of board){\r\n        for(let tile of row){\r\n          if(tile.piece !== null && (checkForWhite ? tile.piece.startsWith('white') : tile.piece.startsWith('black'))){\r\n            let possibleMoves;\r\n            let x = tile.id.charCodeAt(1)-65;\r\n            let y = 8-Number(tile.id[0]);\r\n            if(tile.piece.endsWith('Pawn')){\r\n              possibleMoves = this.pawnPossibleMoves(tile.id, checkForWhite, 1, JSON.parse(JSON.stringify(board)));\r\n            }\r\n            else if(tile.piece.endsWith('Rook')){\r\n              possibleMoves = this.rookPossibleMoves(tile.id, checkForWhite, true, JSON.parse(JSON.stringify(board)));\r\n            }\r\n            else if(tile.piece.endsWith('Knight')){\r\n              possibleMoves = this.knightPossibleMoves(tile.id, checkForWhite, true, JSON.parse(JSON.stringify(board)));\r\n            }\r\n            else if(tile.piece.endsWith('Bishop')){\r\n              possibleMoves = this.bishopPossibleMoves(tile.id, checkForWhite, true, JSON.parse(JSON.stringify(board)));\r\n            }\r\n            else if(tile.piece.endsWith('Queen')){\r\n              possibleMoves = this.queenPossibleMoves(tile.id, checkForWhite, true, JSON.parse(JSON.stringify(board)));\r\n            }\r\n            else if(tile.piece.endsWith('King')){\r\n              possibleMoves = this.kingPossibleMoves(tile.id, checkForWhite, true, JSON.parse(JSON.stringify(board)));\r\n            }\r\n            possibleMoves = this.removeCheckMateMoves(possibleMoves, {x: x, y: y}, checkForWhite, board);\r\n            totalMoves = [].concat(totalMoves, possibleMoves);\r\n            if(totalMoves.length > 0){\r\n              scanStatus = false;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if(!scanStatus) break;\r\n      }\r\n      if(!scanStatus){\r\n        return false;\r\n      }\r\n      else{\r\n        if(totalMoves.length > 0) return false;\r\n        else return true;\r\n      }\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n  removeCheckMateMoves(possibleMoves, focusData, isWhite, board){\r\n    let elementsToRemove = [];\r\n    for(let move of possibleMoves){\r\n      let fakeTile = board[move.y][move.x];\r\n      let virtualBoard = this.generateNextBoard(fakeTile, JSON.parse(JSON.stringify(board)), true, focusData);\r\n      if(this.isKingThreatened(virtualBoard, isWhite)){\r\n        elementsToRemove.push(move);\r\n      }\r\n    }\r\n    for(let element of elementsToRemove){\r\n      possibleMoves = removeFromArray(possibleMoves, element);\r\n    }\r\n    return possibleMoves;\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Menu\r\n          onGenerateNewBoard={this.generateNewBoardHandler}\r\n          isWhiteTurn={this.state.isWhiteTurn} whiteState={this.state.whiteState}\r\n          blackState={this.state.blackState}\r\n        />\r\n        <div className=\"gameDisplay\">\r\n          <PiecesTaken pieces={this.state.whiteTaken} isWhite={true} />\r\n          <Board actualBoard={this.state.actualBoard} onTileClick={this.clickTileHandler} focus={this.state.focus} />\r\n          <PiecesTaken pieces={this.state.blackTaken} isWhite={false} />\r\n        </div>\r\n        <SelectReplacement\r\n          onPromoteClick={this.clickPromotionHandler}\r\n          selection={this.state.promotionInProgress}\r\n          colorSelect={this.state.isWhiteTurn}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}